generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  email             String          @unique
  password          String
  isVerified        Boolean         @default(false)
  verificationToken String?
  role              Role            @default(DONOR)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  firstName         String
  lastName          String
  phoneNumber       String
  admin             Admin?
  donor             Donor?
  logisticsStaff    LogisticsStaff?
  notifications     Notification[]
  recipient         Recipient?
}

model Donor {
  userId    String     @id
  address   String
  donations Donation[] @relation("DonorDonations")
  user      User       @relation(fields: [userId], references: [id])
}

model Recipient {
  userId             String             @id
  address            String
  subscriptionStatus SubscriptionStatus
  subscriptionDate   DateTime
  organization       String?
  donations          Donation[]         @relation("RecipientDonations") // â¬… matches above
  user               User               @relation(fields: [userId], references: [id])
  needs              RecipientNeed[]    @relation("RecipientNeeds")
}

model Donation {
  id            String   @id @default(cuid())
  donorId       String
  recipientId   String?
  status        String
  availableFrom DateTime
  availableTo   DateTime
  expiryDate    DateTime
  foodType      String
  quantity      String
  locationId    String // changed from location String to locationId FK
  notes         String?
  createdAt     DateTime @default(now())
  matchedNeedId String?  @unique

  delivery    Delivery?
  donor       Donor          @relation("DonorDonations", fields: [donorId], references: [userId])
  matchedNeed RecipientNeed? @relation("NeedDonationMatch", fields: [matchedNeedId], references: [id])
  recipient   Recipient?     @relation("RecipientDonations", fields: [recipientId], references: [userId])

  location Location @relation(fields: [locationId], references: [id])
}

model RecipientNeed {
  id              String     @id @default(uuid())
  recipientId     String
  foodType        String
  quantity        String
  notes           String?
  requestedAt     DateTime   @default(now())
  status          NeedStatus @default(pending)
  DropOffAddress  String
  contactPhone    String
  matchedDonation Donation?  @relation("NeedDonationMatch")
  recipient       Recipient  @relation("RecipientNeeds", fields: [recipientId], references: [userId])
}

model Delivery {
  id               String  @id @default(uuid())
  donationId       String  @unique
  logisticsStaffId String?

  pickupLocationId  String
  dropoffLocationId String

  recipientPhone       String
  deliveryInstructions String?
  scheduledDate        DateTime?
  deliveredAt          DateTime?
  deliveryStatus       DeliveryStatus @default(PENDING)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  donation       Donation        @relation(fields: [donationId], references: [id])
  logisticsStaff LogisticsStaff? @relation(fields: [logisticsStaffId], references: [userId])

  pickupLocation  Location @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  dropoffLocation Location @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])
}

model Location {
  id                String     @id @default(uuid())
  label             String
  latitude          Float
  longitude         Float
  pickupDeliveries  Delivery[] @relation("PickupLocation")
  dropoffDeliveries Delivery[] @relation("DropoffLocation")
  Donation          Donation[]
}

model LogisticsStaff {
  userId       String     @id
  role         String
  vehicleInfo  String?
  assignedZone String?
  deliveries   Delivery[]
  user         User       @relation(fields: [userId], references: [id])
}

model Admin {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  message    String
  meta       Json? // new: store { needId, donationId }
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  DONOR
  RECIPIENT
  LOGISTIC_PROVIDER
}

enum SubscriptionStatus {
  active
  inactive
  pending
}

enum NeedStatus {
  pending
  matched
  fulfilled
}

enum DeliveryStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  DELIVERED
  FAILED
  CANCELLED
}

enum FoodStatus {
  available
  matched
  delivered
  expired
}
