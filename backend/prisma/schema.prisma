generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  email             String          @unique
  password          String
  isVerified        Boolean         @default(false)
  verificationToken String?
  role              Role            @default(DONOR)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  firstName         String
  lastName          String
  phoneNumber       String
  admin             Admin?
  donor             Donor?
  logistics_staff   LogisticsStaff?
  notifications     Notification[]
  recipient         Recipient?
}

model Recipient {
  userId             String             @id
  address            String
  subscriptionStatus SubscriptionStatus
  subscriptionDate   DateTime
  organization       String?
  user               User               @relation(fields: [userId], references: [id])
  needs              RecipientNeed[]
}

model Donor {
  userId    String     @id
  address   String
  user      User       @relation(fields: [userId], references: [id])
  foodItems FoodItem[]
}

model Admin {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])
}

model LogisticsStaff {
  userId       String     @id
  role         String
  vehicleInfo  String?
  assignedZone String?
  deliveries   Delivery[]
  user         User       @relation(fields: [userId], references: [id])
}

model FoodItem {
  id         String     @id @default(uuid())
  donorId    String
  name       String
  category   String
  quantity   Int
  expiryDate DateTime?
  listedAt   DateTime   @default(now())
  status     FoodStatus
  donor      Donor      @relation(fields: [donorId], references: [userId])
  matches    Match[]
}

model RecipientNeed {
  id             String     @id @default(uuid())
  recipientId    String
  itemName       String
  category       String
  quantityNeeded Int
  requestedAt    DateTime   @default(now())
  status         NeedStatus
  matches        Match[]
  recipient      Recipient  @relation(fields: [recipientId], references: [userId])
}

model Match {
  id              String        @id @default(uuid())
  foodItemId      String
  recipientNeedId String
  matchedAt       DateTime      @default(now())
  notified        Boolean       @default(false)
  accepted        Boolean       @default(false)
  delivery        Delivery?
  foodItem        FoodItem      @relation(fields: [foodItemId], references: [id])
  recipientNeed   RecipientNeed @relation(fields: [recipientNeedId], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  message    String
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model DeliveryTracking {
  id           String   @id @default(uuid())
  deliveryId   String
  location     String
  statusUpdate String
  timestamp    DateTime @default(now())
  delivery     Delivery @relation(fields: [deliveryId], references: [id])
}

model Delivery {
  id               String             @id @default(uuid())
  matchId          String             @unique
  logisticsStaffId String
  scheduledDate    DateTime
  deliveredAt      DateTime?
  deliveryStatus   DeliveryStatus     @default(pending)
  logisticsStaff   LogisticsStaff     @relation(fields: [logisticsStaffId], references: [userId])
  match            Match              @relation(fields: [matchId], references: [id])
  trackingUpdates  DeliveryTracking[]
}

enum Role {
  ADMIN
  DONOR
  RECIPIENT
  LOGISTIC_PROVIDER
}

enum SubscriptionStatus {
  active
  inactive
  pending
}

enum FoodStatus {
  available
  matched
  delivered
  expired
}

enum NeedStatus {
  pending
  matched
  fulfilled
}

enum DeliveryStatus {
  pending
  in_transit
  completed
  failed
}
